import _  from 'lodash';
import * as yup from 'yup';
import axios from 'axios';
import {routes, schema, errorMessages, validate, validateDuplicates, handleProcessState, handleProcessError, renderError, renderErrors, render, existingWebsites } from './application.js';
import onChange from 'on-change';


export default () => {

  const elements = {
    container: document.getElementsByClassName('row')[0],
    form: document.getElementsByClassName('form-floating')[0],
    fields: {
    website: document.getElementById('url-input'),
  },
  submitButton: document.querySelector('button[type="submit"]'),
  };
  const initialState = {
    form: {
      valid: true,
      processState: 'filling',
      processError: null,
      errors: {},
    fields: {
      website: '',
    },
    fieldsUi: {
      touched: {
        website: false,
      },
    },
    },
};


//let existingWebsites = [];

const state = onChange(initialState, (path, value, prevValue) => {
   render(elements, initialState, existingWebsites)(path, value, prevValue);
});

const handleFormSubmit = async(e) => {
  e.preventDefault();
  state.form.processState = 'sending';
  state.form.processError = null;

try {
  const data = {
    website: state.form.fields.website,
};

  const errors = validate(state.form.fields);
  const duplicatesErrors = validateDuplicates(state.form.fields, existingWebsites);

if (errors || duplicatesErrors) {
  state.form.errors = {...errors, ...duplicatesErrors };
  state.form.valid = false;
  return;
}
  await axios.post(routes.usersPath(), data);
  state.form.processState = 'sent';
}  catch (err) {
  state.form.processStare = 'error';
  state.form.processError = errorMessages.network.error;
  throw err;
}
};

const handleFieldInput = (e) => {
  const {value } = e.target;
  state.form.fields.website = value;
  state.form.fieldsUi.touched.website = true;
  if (value === existingWebsites) {
  state.form.errors = {website: 'This URL is already entered' };
  state.form.valid = false;
  return;
}


  const errors = validate(state.form.fields);
  const duplicatesErrors = validateDuplicates(state.form.fields);
  state.form.errors = { ...errors, ...duplicatesErrors };
  state.form.valid = _.isEmpty(errors) && !duplicatesErrors;
};
  elements.form.addEventListener('submit', handleFormSubmit);
  elements.fields.website.addEventListener('input', handleFieldInput);


};
//Object.entries(elements.fields).forEach(([fieldName, fieldElement]) => {
  //fieldElement.addEventListener('input', (e) => {
    //const { value } =e.target;
    //state.form.fields[fieldName] = value;
    //state.form.fieldsUi.touched[fieldName] = true;
    //const errors = validate(state.form.fields, existingWebsites);
    //state.form.errors = errors;
    //state.form.valid = _.isEmpty(errors);
    //});
//});

//elements.form[0].addEventListener('submit', async (e) => {
  //e.preventDefault();
  
  //state.form.processState = 'sending';
  //state.form.processError = null;

  //try {
    //const data = {
      //website: state.form.fields.website,
   // };
   //await axios.post(routes.usersPath(), data);
   //state.form.processState = 'sent';

 // } catch (err) {
   // state.form.processState = 'error';
    //state.form.processError = errorMessages.network.error;
    //throw err;
   // }
 // });
//};

